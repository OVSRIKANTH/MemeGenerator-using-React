{"version":3,"sources":["Components/Header.js","Components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","style","backgroundColor","src","alt","height","width","padding","fontSize","marginLeft","display","marginTop","color","position","fontFamily","MemeGenerator","handleChange","event","target","name","value","setState","handleClick","randNum","Math","floor","random","state","allMemeImgs","length","randMemeImag","url","randomImg","handleColor","ok","topText","bottomText","fetch","then","resp","json","memes","data","whiteStyle","textAlign","left","right","textTransform","letterSpacing","textShadow","blackStyle","textstyle","class","id","type","this","placeholder","onChange","onClick","marginBottom","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45001d9b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div style={{backgroundColor:\"#F00\"}}>\r\n            <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"Boom!!\" style= {{height:100,width:100,padding:20}} />\r\n            <p style={{fontSize:50,marginLeft:350,display:\"inline\",marginTop:10,color:\"#ff0\",position:\"absolute\",fontFamily:\"cursive\"}}>Meme Generator</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            topText:\"\",\r\n            bottomText:\"\",\r\n            randomImg:\"https://static01.nyt.com/images/2020/01/28/multimedia/28xp-memekid3/28cp-memekid3-articleLarge.jpg\",\r\n            allMemeImgs:[],\r\n            ok:true\r\n         };\r\n    }\r\n\r\n    componentDidMount(){\r\n        //https://imgflip.com/api\r\n        fetch(\"https://api.imgflip.com/get_memes\").then(resp => resp.json()).then(resp => {const {memes} = resp.data \r\n                                                                                                this.setState({allMemeImgs:memes}) })\r\n    }\r\n\r\n    handleChange= (event)=>{\r\n        const {name,value}=event.target\r\n        this.setState({[name]:value})\r\n    }\r\n\r\n    handleClick= ()=>{\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randMemeImag = this.state.allMemeImgs[randNum].url\r\n        this.setState({randomImg:randMemeImag})\r\n\r\n    }\r\n\r\n    handleColor= ()=>{\r\n        if(this.state.ok === true) this.setState({ok:false})\r\n        else this.setState({ok:true})\r\n        \r\n    }\r\n\r\n   \r\n    \r\n    \r\n    render() {\r\n        const whiteStyle = {position:\"absolute\",textAlign:\"center\",left:0,right:0,fontSize:42,fontFamily:\"impact\",\r\n        textTransform: \"uppercase\",letterSpacing: 1,color:\"#fff\",textShadow: \"2px 2px #000\" }\r\n        const blackStyle ={position:\"absolute\",textAlign:\"center\",left:0,right:0,fontSize:42,fontFamily:\"impact\",\r\n        textTransform: \"uppercase\",letterSpacing: 1}\r\n\r\n        const textstyle = ()=>{\r\n            if(this.state.ok) return blackStyle\r\n            return whiteStyle\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n               \r\n\r\n                <div class=\"input-group\" style={{padding:30}}>\r\n                        <div class=\"input-group-prepend\">\r\n                        <span class=\"input-group-text\" id=\"\">Enter Top and Bottom Text</span>\r\n                        </div>\r\n                             <input type=\"text\" class=\"form-control\" value={this.state.topText} name=\"topText\" placeholder=\"Top Text\" onChange={this.handleChange}/>\r\n                             <input type=\"text\" class=\"form-control\" value={this.state.bottomText} name=\"bottomText\" placeholder=\"Bottom Text\" onChange={this.handleChange}/>\r\n                             <button type=\"button\" class=\"btn btn-secondary\" onClick={this.handleColor}>Change Colour</button>\r\n                             <button type=\"button\" class=\"btn btn-info\" style={{width:150}} onClick={this.handleClick}>GO</button>\r\n                </div>\r\n\r\n                <div style={{marginTop:50,marginBottom:150,textAlign:\"center\"}}>\r\n                    <h6 style={{...textstyle(),marginTop:8}}>{this.state.topText}</h6>  \r\n                 \r\n                    <h6 style={{...textstyle(),marginTop:430}}>{this.state.bottomText}</h6> \r\n\r\n                    <img src={this.state.randomImg} alt=\"meme\" style={{width:600,height:500}}/>\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemeGenerator;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport MemeGenerator from './Components/MemeGenerator';\n\n\n\nfunction App() {\n  return (\n    <div>\n        <Header />\n        <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}